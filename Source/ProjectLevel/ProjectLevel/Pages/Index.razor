@page "/"

@using System.Timers;
@using ProjectLevel.Contracts.v1
@using ProjectLevel.Contracts.v1.Interfaces
@using ProjectLevel.Contracts.v1.Models
@using ProjectLevel.Services.v1.Implementations
@inject ProjectLevel.Contracts.v1.Interfaces.IGame game
@inject ProjectLevel.Services.v1.Implementations.CommandManager commandManager
@inject System.Timers.Timer globalTimer

<PageTitle>Index</PageTitle>

<h1>Hello, from Project Level!</h1>

<h3>Debug Crap</h3>
<button class="btn btn-primary" @onclick=@GetAllItems>Get all Items</button>

<h3>Military</h3>
<table class="table table-striped">
  <thead>
    <tr>
      <th style="width:10%" scope="col">Type</th>
      <th style="width:10%" scope="col">Unit Count</th>
      <th style="width:20%" scope="col">Buy Unit</th>
      <th style="width:10%" scope="col">Level</th>
      <th style="width:20%" scope="col">Ugrade</th>
      <th style="width:10%" scope="col">Damage</th>
      <th style="width:20%" scope="col">Action</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th scope="row">@nameof(Constants.MilitaryType.Melee)</th>
      <td>@game.GetMilitaryUnitCount(Constants.MilitaryType.Melee)</td>
      <td><button class="btn btn-primary" style="background-color:black; color:white;" @onclick="@(_ => UpgradeMilitaryUnitCount(Constants.MilitaryType.Melee))" disabled="@ShouldButtonBeClickable(() => game.CanUpgradeMilitaryUnitCount(Constants.MilitaryType.Melee))">+</button></td>
      <td>@game.GetMilitaryLevel(Constants.MilitaryType.Melee)</td>
      <td><button class="btn btn-primary" style="background-color:blue; color:white;" @onclick="@(_ => UpgradeMilitaryLevel(Constants.MilitaryType.Melee))" disabled="@ShouldButtonBeClickable(() => game.CanUpgradeMilitaryLevel(Constants.MilitaryType.Melee))">+</button></td>
      <td>@game.GetMilitaryDamage(Constants.MilitaryType.Melee)</td>
      <td><progress id="progMelee" value="@game.GetMilitaryActionBarValue(Constants.MilitaryType.Melee)" max="@Constants.ActionBarMax"></progress></td>
    </tr>
    <tr>
      <th scope="row">@nameof(Constants.MilitaryType.Ranged)</th>
      <td>@game.GetMilitaryUnitCount(Constants.MilitaryType.Ranged)</td>
      <td><button class="btn btn-primary" style="background-color:black; color:white;" @onclick="@(_ => UpgradeMilitaryUnitCount(Constants.MilitaryType.Ranged))" disabled="@ShouldButtonBeClickable(() => game.CanUpgradeMilitaryUnitCount(Constants.MilitaryType.Ranged))">+</button></td>
      <td>@game.GetMilitaryLevel(Constants.MilitaryType.Ranged)</td>
      <td><button class="btn btn-primary" style="background-color:blue; color:white;" @onclick="@(_ => UpgradeMilitaryLevel(Constants.MilitaryType.Ranged))" disabled="@ShouldButtonBeClickable(() => game.CanUpgradeMilitaryLevel(Constants.MilitaryType.Ranged))">+</button></td>
      <td>@game.GetMilitaryDamage(Constants.MilitaryType.Ranged)</td>
      <td><progress id="progRanged" value="@game.GetMilitaryActionBarValue(Constants.MilitaryType.Ranged)" max="@Constants.ActionBarMax"></progress></td>
    </tr>
    <tr>
      <th scope="row">@nameof(Constants.MilitaryType.Siege)</th>
      <td>@game.GetMilitaryUnitCount(Constants.MilitaryType.Siege)</td>
      <td><button class="btn btn-primary" style="background-color:black; color:white;" @onclick="@(_ => UpgradeMilitaryUnitCount(Constants.MilitaryType.Siege))" disabled="@ShouldButtonBeClickable(() => game.CanUpgradeMilitaryUnitCount(Constants.MilitaryType.Siege))">+</button></td>
      <td>@game.GetMilitaryLevel(Constants.MilitaryType.Siege)</td>
      <td><button class="btn btn-primary" style="background-color:blue; color:white;" @onclick="@(_ => UpgradeMilitaryLevel(Constants.MilitaryType.Siege))" disabled="@ShouldButtonBeClickable(() => game.CanUpgradeMilitaryLevel(Constants.MilitaryType.Siege))">+</button></td>
      <td>@game.GetMilitaryDamage(Constants.MilitaryType.Siege)</td>
      <td><progress id="progSiege" value="@game.GetMilitaryActionBarValue(Constants.MilitaryType.Siege)" max="@Constants.ActionBarMax"></progress></td>
    </tr>
  </tbody>
</table>

Your current Civilization info: 
<br />
<hr />

Gold: <label id="lblGold">@game.GetGold()</label>
<br />
Gold Income Rate: <label id="lblGoldLevel">@game.GetGoldIncomeRate()</label>
<br />
Gold Action: <progress id="progGold" value="@game.GetGoldActionBarValue()" max="@Constants.ActionBarMax"></progress>
<br />
<button class="btn btn-primary" style="background-color:yellow; color:black;" @onclick="UpgradeGoldLevel" disabled="@ShouldButtonBeClickable(game.CanUpgradeGoldLevel)">Upgrade Economy!</button>
<br />
<hr />

Melee Unit Count: <label id="lblMeleeUnitCount">@game.GetMilitaryUnitCount(Constants.MilitaryType.Melee)</label>
<br />
Melee Level: <label id="lblMeleeLevel">@game.GetMilitaryLevel(Constants.MilitaryType.Melee)</label>
<br />
Melee Damage: <label id="lblMeleeDamage">@game.GetMilitaryDamage(Constants.MilitaryType.Melee)</label>
<br />
Melee Action: <progress id="progMelee" value="@game.GetMilitaryActionBarValue(Constants.MilitaryType.Melee)" max="@Constants.ActionBarMax"></progress>
<br />
<button class="btn btn-primary" style="background-color:black; color:white;" @onclick="@(_ => UpgradeMilitaryUnitCount(Constants.MilitaryType.Melee))" disabled="@ShouldButtonBeClickable(() => game.CanUpgradeMilitaryUnitCount(Constants.MilitaryType.Melee))">Buy Melee Unit!</button>
<button class="btn btn-primary" style="background-color:blue; color:white;" @onclick="@(_ => UpgradeMilitaryLevel(Constants.MilitaryType.Melee))" disabled="@ShouldButtonBeClickable(() => game.CanUpgradeMilitaryLevel(Constants.MilitaryType.Melee))">Upgrade Melee!</button>
<br />
<hr />

Ranged Unit Count: <label id="lblRangedUnitCount">@game.GetMilitaryUnitCount(Constants.MilitaryType.Ranged)</label>
<br />
Ranged Level: <label id="lblRangedLevel">@game.GetMilitaryLevel(Constants.MilitaryType.Ranged)</label>
<br />
Ranged Damage: <label id="lblRangedDamage">@game.GetMilitaryDamage(Constants.MilitaryType.Ranged)</label>
<br />
Ranged Action: <progress id="progRanged" value="@game.GetMilitaryActionBarValue(Constants.MilitaryType.Ranged)" max="@Constants.ActionBarMax"></progress>
<br />
<button class="btn btn-primary" style="background-color:black; color:white;" @onclick="@(_ => UpgradeMilitaryUnitCount(Constants.MilitaryType.Ranged))" disabled="@ShouldButtonBeClickable(() => game.CanUpgradeMilitaryUnitCount(Constants.MilitaryType.Ranged))">Buy Ranged Unit!</button>
<button class="btn btn-primary" style="background-color:blue; color:white;" @onclick="@(_ => UpgradeMilitaryLevel(Constants.MilitaryType.Ranged))" disabled="@ShouldButtonBeClickable(() => game.CanUpgradeMilitaryLevel(Constants.MilitaryType.Ranged))">Upgrade Ranged!</button>
<br />
<hr />

Siege Unit Count: <label id="lblSiegeUnitCount">@game.GetMilitaryUnitCount(Constants.MilitaryType.Siege)</label>
<br />
Siege Level: <label id="lblSiegeLevel">@game.GetMilitaryLevel(Constants.MilitaryType.Siege)</label>
<br />
Siege Damage: <label id="lblSiegeDamage">@game.GetMilitaryDamage(Constants.MilitaryType.Siege)</label>
<br />
Siege Action: <progress id="progSiege" value="@game.GetMilitaryActionBarValue(Constants.MilitaryType.Siege)" max="@Constants.ActionBarMax"></progress>
<br />
<button class="btn btn-primary" style="background-color:black; color:white;" @onclick="@(_ => UpgradeMilitaryUnitCount(Constants.MilitaryType.Siege))" disabled="@ShouldButtonBeClickable(() => game.CanUpgradeMilitaryUnitCount(Constants.MilitaryType.Siege))">Buy Siege Unit!</button>
<button class="btn btn-primary" style="background-color:blue; color:white;" @onclick="@(_ => UpgradeMilitaryLevel(Constants.MilitaryType.Siege))" disabled="@ShouldButtonBeClickable(() => game.CanUpgradeMilitaryLevel(Constants.MilitaryType.Siege))">Upgrade Siege!</button>
<br />
<hr />




@code {

    private void UpgradeGoldLevel()
    {
        CommandUpgradeGoldLevel command = new CommandUpgradeGoldLevel(game);
        commandManager.Invoke(command);
    }

    private void UpgradeMilitaryLevel(Constants.MilitaryType militaryType)
    {
        CommandUpgradeMilitaryLevel command = new CommandUpgradeMilitaryLevel(game, militaryType);
        commandManager.Invoke(command);
    }

    private void UpgradeMilitaryUnitCount(Constants.MilitaryType militaryType)
    {
        CommandUpgradeMilitaryUnitCount command = new CommandUpgradeMilitaryUnitCount(game, militaryType);
        commandManager.Invoke(command);
    }

    private bool ShouldButtonBeClickable(Func<bool> func)
    {
        return !func.Invoke();
    }

    protected override void OnInitialized()
    {
        if(!globalTimer.Enabled)
        {
            globalTimer.Interval = 100;
            globalTimer.Elapsed += RefreshUI;
            globalTimer.Elapsed += RefreshGameTimers;
            globalTimer.Start();
        }
        else
        {
            globalTimer.Elapsed += RefreshUI;
        }

    }

    private void RefreshUI(object? sender, ElapsedEventArgs? e)
    {
        base.InvokeAsync(StateHasChanged);
    }

    private void RefreshGameTimers(object? sender, ElapsedEventArgs? e)
    {
        game.TriggerAllActionBars();
    }

    // Debug crap
    private void GetAllItems()
    {
        game.AddLoot(game.GetAvailableLoot());
    }

    public void Dispose()
    {
        //globalTimer.Dispose();
    }
}